{"version":3,"sources":["redux/actions/movies.js","redux/reducers/movies.js","redux/combineReducers.js","components/Sort/AlphaSort/index.js","components/Sort/RatingSort/index.js","components/Layout/index.js","components/List/index.js","components/Loading/index.js","components/SearchInput/index.js","services/omdb-api.js","views/MoviesList.js","views/MovieDetails.js","redux/store.js","App.js","serviceWorker.js","index.js","assets/img/bg-placeholder.jpg"],"names":["update","data","type","initialState","movies","list","reducer","state","action","persistConfig","key","storage","appReducer","persistReducer","moviesReducer","rootReducer","AlphaSort","props","value","setValue","colorClass","iconClass","title","className","Button","variant","block","onClick","RatingSort","Layout","Card","Body","children","ListItem","onCheckDetails","Col","sm","md","lg","Img","src","Poster","BgPlaceholder","Subtitle","Title","Text","imdbRating","List","Row","map","item","imdbID","LoadingScreen","defaultAnimationOptions","loop","autoplay","animationData","searchingAnimation","rendererSettings","preserveAspectRatio","options","height","width","SearchInput","controlId","required","placeholder","maxYear","Date","getFullYear","minYear","minChar","inputProps","min","max","useState","error","setError","onBeforeChange","onAfterChange","onSubmit","Form","Group","Control","onChange","e","newVal","target","length","parseInt","onBlur","onKeyPress","charCode","APIkey","omdbAPIServiceBase","axios","create","baseURL","omdbAPIService","search","byTitle","a","onSuccess","onError","url","method","then","res","catch","err","byTitleAndYear","year","byId","id","batch","arr","i","promisesArr","push","dataFetchedArr","Promise","all","values","MoviesList","history","useHistory","dispatch","useDispatch","storedList","useSelector","movieName","setMovieName","movieYear","setMovieYear","initialMessage","message","setMessage","messageColorClass","setMessageColorClass","buttonDisabled","setButtonDisabled","isSearching","setIsSearching","movieList","setMovieList","alphaSort","setAlphaSort","ratingSort","setRatingSort","updateMoviesList","onSearchSuccess","result","Search","omdbAPI","onSearchError","onSubmitSearch","href","rel","name","yearVal","disabled","newValue","sortedMovieList","Array","from","sort","b","x","toLowerCase","y","parseFloat","dispatchData","selectedMovie","translateMovieAttribute","attr","MovieDetail","useEffect","Image","thumbnail","fluid","Year","parseMovieType","Type","Table","responsive","detailsObj","detailsArray","label","parseDetails","store","createStore","applyMiddleware","thunk","persistor","persistStore","reduxStore","App","loading","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","module","exports"],"mappings":"wQAOaA,EAAS,SAACC,GACrB,MAAO,CACLC,KAHkB,SAIlBD,KAAMA,ICPJE,EAAe,CACjBC,OAAQ,CACJC,KAAM,KAgCCC,EA5BC,WAAmC,IAAlCC,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAC9C,OAAQA,EAAON,MAEX,IDNc,SCOV,OAAO,2BACAK,GADP,IAEIH,OAAO,2BACAG,EAAMH,QACNI,EAAOP,KAAKG,UAK3B,IDtBa,QCuBT,OAAO,eACAD,GAMX,QACI,OAAO,eACAI,KC5BbE,EAAgB,CAClBC,IAAK,OACLC,QAASA,KAEPC,EAAaC,YAAeJ,EAAeK,GAElC,SAASC,EAAYR,EAAMC,GACtC,OAAOI,EAAWL,EAAMC,G,sDCLb,SAASQ,EAAUC,GAE9B,IAAMC,EAAQD,EAAMC,MACdC,EAAWF,EAAME,SACjBC,EAAuB,OAAVF,EAAiB,eAAiB,eAC/CG,EAAcH,EAAQ,uCAAkD,IAAVA,EAAkB,uCAAyC,sCACzHI,EAAUJ,EAAQ,iDAA4D,IAAVA,EAAkB,kDAAoD,kCAMhJ,OACI,yBAAKK,UAAU,QACX,kBAACC,EAAA,EAAD,CAAQC,QAASL,EAAYM,OAAK,EAACC,QAP3B,WACPR,GAAUA,KAM0CG,MAAOA,GACxD,0BAAMC,UAAWF,IADrB,IACyCC,ICftC,SAASM,EAAWX,GAE/B,IAAMC,EAAQD,EAAMC,MACdC,EAAWF,EAAME,SACjBC,EAAuB,OAAVF,EAAiB,eAAiB,eAC/CG,EAAcH,EAAQ,0BAAqC,IAAVA,EAAkB,0BAA4B,yBAC/FI,EAAUJ,EAAQ,mDAA2D,IAAVA,EAAkB,oDAAmD,oCAM9I,OACI,yBAAKK,UAAU,QACX,kBAACC,EAAA,EAAD,CAAQC,QAASL,EAAYM,OAAK,EAACC,QAP3B,WACPR,GAAUA,KAM0CG,MAAOA,GACxD,0BAAMC,UAAWF,IADrB,IACyCC,I,aCjBtC,SAASO,EAAOZ,GAC3B,OACI,yBAAKM,UAAU,eACX,yBAAKA,UAAU,kBACX,kBAACO,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,KACKd,EAAMe,a,qBCAzBC,EAAW,SAAChB,GACd,IAAMhB,EAAOgB,EAAMhB,KACbiC,EAAiBjB,EAAMiB,eAI7B,OACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGf,UAAU,OACjC,kBAACO,EAAA,EAAD,CAAMP,UAAU,YAAYI,QALpB,WACNO,GAAgBA,EAAejC,KAK7B,kBAAC6B,EAAA,EAAKS,IAAN,CAAUd,QAAQ,MAAMe,IAAqB,QAAhBvC,EAAKwC,OAAmBxC,EAAKwC,OAASC,IAAenB,UAAU,eAC5F,kBAACO,EAAA,EAAKC,KAAN,CAAWR,UAAU,OACjB,yBAAKA,UAAU,6FACX,kBAACO,EAAA,EAAKa,SAAN,CAAepB,UAAU,WACpBtB,EAAK2C,OAEV,kBAACd,EAAA,EAAKe,KAAN,CAAWtB,UAAU,yDACjB,0BAAMA,UAAU,8BAChB,0BAAMA,UAAU,cAAkC,QAApBtB,EAAK6C,WAAuB,IAAM7C,EAAK6C,WAArE,aASb,SAASC,EAAK9B,GACzB,IAAMhB,EAASgB,EAAMhB,KAAOgB,EAAMhB,KAAO,GACnCiC,EAAmBjB,EAAMiB,eAAiBjB,EAAMiB,eAAiB,KACvE,OACI,oCACI,kBAACc,EAAA,EAAD,KACK/C,EAAKgD,KAAI,SAAAC,GACN,OACI,kBAAC,EAAD,CAAUxC,IAAKwC,EAAKC,OAAQlD,KAAMiD,EAAMhB,eAAgBA,S,6BCvCjE,SAASkB,EAAcnC,GAElC,IAAMoC,EAA0B,CAC5BC,MAAM,EACNC,UAAU,EACVC,cAAeC,EACfC,iBAAkB,CACdC,oBAAqB,mBAG7B,OACI,oCACI,yBAAKpC,UAAU,gFACX,kBAAC,IAAD,CACIqC,QAASP,EACTQ,OAAQ,IACRC,MAAO,Q,aChBZ,SAASC,EAAY9C,GAEhC,IAAM+C,EAAc/C,EAAM+C,UAAY/C,EAAM+C,UAAY,QAClDC,IAAahD,EAAMgD,UAAWhD,EAAMgD,SACpC/D,EAASe,EAAMf,KAAOe,EAAMf,KAAO,OACnCgE,EAAgBjD,EAAMiD,YAAgBD,EAAWhD,EAAMiD,YAAc,oBAAmBjD,EAAMiD,YAAc,GAC5GC,EAAmB,SAATjE,GAAkB,IAAIkE,MAAOC,cAAgB,KACvDC,EAAmB,SAATpE,EAAkB,KAAO,KACnCqE,EAAYtD,EAAMsD,QAAUtD,EAAMsD,QAAU,KAC5CC,EAAsB,SAATtE,EAAkB,CAAEuE,IAAKH,EAASI,IAAKP,GAAY,KAT/B,EAUbQ,mBAAS,MAVI,mBAUhCC,EAVgC,KAUzBC,EAVyB,OAWbF,mBAAS,IAXI,mBAWhCzD,EAXgC,KAWzBC,EAXyB,KAajC2D,EAAmB7D,EAAM6D,eAAiB7D,EAAM6D,eAAiB,KACjEC,EAAkB9D,EAAM8D,cAAgB9D,EAAM8D,cAAgB,KAgD9DC,EAAa/D,EAAM+D,SAAW/D,EAAM+D,SAAW,KAKrD,OACI,kBAACC,EAAA,EAAKC,MAAN,CAAYlB,UAAWA,GACnB,kBAACiB,EAAA,EAAKE,QAAN,iBAAkBX,EAAlB,CAA8BtE,KAAe,SAATA,EAAkB,SAAWA,EAAMgE,YAAaA,EAAahD,MAAOA,EAAOkE,SArDtG,SAACC,GACd,IAAIC,EAASD,EAAEE,OAAOrE,MAChB4D,GAAgBA,EAAeQ,GAC/BrB,IAEGY,EADAS,EACS,KADQ,mCAEjBf,IACEe,EAAOE,OAASjB,EAASM,EAAS,wCAAsCN,EAAU,gBAChFM,EAAS,QAGT,SAAT3E,GACMoF,GAAUA,EAAOE,QAAU,KAAOC,SAASH,IAAWhB,GAAWmB,SAASH,IAAWnB,KACnFsB,SAASH,GAAUhB,EAASgB,EAAShB,EAChCmB,SAASH,GAAUnB,IAASmB,EAASnB,IAGhDY,GAAeA,EAAcO,GACnCnE,EAASmE,IAmC8HI,OAhC5H,WACX,IAAIJ,EAASpE,EACP+C,IAEGY,EADAS,EACS,KADQ,mCAEjBf,IACEe,EAAOE,OAASjB,EAASM,EAAS,wCAAsCN,EAAU,gBAChFM,EAAS,QAIT,SAAT3E,GACMoF,IACCA,EAAOE,QAAU,EACVC,SAASH,IAAWhB,GAAWmB,SAASH,IAAWnB,IACjDsB,SAASH,GAAUhB,EAASgB,EAAShB,EAChCmB,SAASH,GAAUnB,IAASmB,EAASnB,IAGjDmB,EAAShB,GAGtBnD,EAASmE,IAU8IK,WALxI,SAACN,GACE,KAAfA,EAAEO,UAAqBZ,GAAUA,QAM3BJ,EACG,kBAACK,EAAA,EAAKpC,KAAN,CAAWtB,UAAU,oBAChBqD,GAFA,M,qCC1EnBiB,EAAS,WAETC,E,OAAqBC,EAAMC,OAAO,CACpCC,QAAS,2BAwEEC,EArEQ,CACnBC,OAAQ,CACJC,QAAQ,WAAD,4BAAE,WAAO9E,GAAP,+BAAA+E,EAAA,6DAAcC,EAAd,+BAA0B,KAAMC,EAAhC,+BAA0C,KACzCC,EAAM,WAAaX,EAAS,MAAQvE,EAAQ,UAD7C,SAGCwE,EAAmB,CACrBW,OAAQ,MACRD,IAAKA,IAEJE,MAAK,SAACC,GACGL,GAAWA,EAAUK,EAAI1G,SAElC2G,OAAM,SAACC,GACEN,GAASA,EAAQM,MAX1B,2CAAF,mDAAC,GAcRC,eAAe,WAAD,4BAAE,WAAOxF,EAAOyF,GAAd,+BAAAV,EAAA,6DAAoBC,EAApB,+BAAgC,KAAMC,EAAtC,+BAAgD,KACtDC,EAAM,WAAaX,EAAS,MAAQvE,EAAQ,MAAQyF,EAAO,UADrD,SAENjB,EAAmB,CACrBW,OAAQ,MACRD,IAAKA,IAEJE,MAAK,SAACC,GACGL,GAAWA,EAAUK,EAAI1G,SAElC2G,OAAM,SAACC,GACEN,GAASA,EAAQM,MAVnB,2CAAF,qDAAC,GAafG,KAAK,WAAD,4BAAE,WAAOC,GAAP,+BAAAZ,EAAA,6DAAWC,EAAX,+BAAuB,KAAMC,EAA7B,+BAAuC,KACnCC,EAAM,WAAaX,EAAS,MAAQoB,EAAK,UAD7C,SAEInB,EAAmB,CACrBW,OAAQ,MACRD,IAAKA,IAEJE,MAAK,SAACC,GACGL,GAAWA,EAAUK,EAAI1G,SAElC2G,OAAM,SAACC,GACEN,GAASA,EAAQM,MAV7B,2CAAF,mDAAC,GAaLK,MAAM,WAAD,4BAAE,WAAOC,GAAP,mCAAAd,EAAA,sDAEH,IAASe,KAFMd,EAAZ,+BAAwB,KAAMC,EAA9B,+BAAwC,KACvCc,EAAc,GACJF,EACVE,EAAYC,KACRxB,EAAmB,CACfW,OAAQ,MACRD,IAAK,WAAaX,EAAS,MAAQsB,EAAIC,GAAGjE,OAAS,aAN5D,OAUCoE,EAAiB,GAVlB,SAWGC,QAAQC,IAAIJ,GAAaX,MAAK,SAACgB,GACjC,IAAK,IAAIN,KAAKM,EACVH,EAAeD,KAAf,eAEWI,EAAON,GAAGnH,UAI1B2G,OAAM,SAAAC,GACCN,GAASA,EAAQM,MApBxB,OAsBGP,GAAWA,EAAUiB,GAtBxB,2CAAF,mDAAC,KC/BC,SAASI,EAAW1G,GACjC,IAAM2G,EAAUC,cACVC,EAAWC,cACXC,EAAaC,aAAY,SAAA1H,GAAK,OAAIA,EAAMH,OAAOC,QAE/C8D,GAAU,IAAIC,MAAOC,cALa,EAQNM,mBAAS,IARH,mBAQjCuD,EARiC,KAQtBC,EARsB,OASNxD,mBAAS,IATH,mBASjCyD,EATiC,KAStBC,EATsB,KAUlCC,EAAiB,mDAViB,EAWV3D,mBAAS2D,GAXC,mBAWjCC,EAXiC,KAWxBC,EAXwB,OAYU7D,mBAAS,aAZnB,mBAYjC8D,EAZiC,KAYdC,EAZc,OAaI/D,oBAAS,GAbb,mBAajCgE,EAbiC,KAajBC,EAbiB,OAcFjE,oBAAS,GAdP,mBAcjCkE,EAdiC,KAcpBC,EAdoB,OAeNnE,mBAASqD,GAfH,mBAejCe,EAfiC,KAetBC,EAfsB,OAiBNrE,mBAAS,MAjBH,mBAiBjCsE,EAjBiC,KAiBtBC,GAjBsB,QAkBJvE,mBAAS,MAlBL,qBAkBjCwE,GAlBiC,MAkBrBC,GAlBqB,MAiClCC,GAAmB,SAACpJ,GAMxB6H,EAAS9H,EALY,CACnBI,OAAQ,CACNC,KAAMJ,MAIV+I,EAAa/I,IAwCTqJ,GAAkB,SAACC,GACvBL,GAAa,MACbE,GAAc,MACTG,EAAOC,OAQVC,EAAQtD,OAAOe,MAAMqC,EAAOC,QAAQ,SAAC7C,GACnCmC,GAAe,GACfO,GAAiB1C,KAChB+C,KAVHZ,GAAe,GAEfJ,EAAqB,aACrBF,EAAW,2BACXa,GAAiB,MAWfK,GAAgB,SAAC9E,GACrBkE,GAAe,GACfJ,EAAqB,eACrBF,EAAW,6CAsDPmB,GAAiB,WACrBnB,EAAW,MACXM,GAAe,GACTZ,GAAeE,EACnBqB,EAAQtD,OAAOW,eAAeoB,EAAWE,EAAWkB,GAAiBI,IAGrED,EAAQtD,OAAOC,QAAQ8B,EAAWoB,GAAiBI,KAWvD,OACE,kBAAC7H,EAAD,KACE,kBAACmB,EAAA,EAAD,KACE,kBAACb,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAEvB,wBAAIf,UAAU,kBAAd,qBACA,wFAC4D,uBAAGqI,KAAK,0BAA0BrE,OAAO,SAASsE,IAAI,uBAAtD,YAD5D,KAGA,2FAGJ,kBAAC7G,EAAA,EAAD,KACE,kBAACb,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GACtB,kBAACyB,EAAD,CACEG,YAAY,gBACZF,UAAU,kBACVe,cApJW,SAAC+E,GACfA,EAMCA,EAAKtE,OAAS,GAChBoD,GAAkB,GAClBF,EAAqB,eACrBF,EAAW,4CAGXI,GAAkB,GAClBF,EAAqB,gBACrBF,EAAW,oDAbbI,GAAkB,GAClBF,EAAqB,eACrBF,EAAW,sDAcbL,EAAa2B,IAmIL7F,UAAQ,EACRe,SAAU2E,GACVpF,QAAS,KAGb,kBAACpC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GACtB,kBAACyB,EAAD,CACEG,YAAY,eACZF,UAAU,kBACVe,cAzIW,SAACgC,GACpB,IAAIgD,EAAUhD,EACRA,EACAA,EAAKvB,QAAU,EACXC,SAASsB,IA9DL,MA8DyBtB,SAASsB,IAAS5C,IAC/CsB,SAASsB,GA/DL,KA+DsBgD,EA/DtB,KAgECtE,SAASsB,GAAQ5C,IAAS4F,EAAU5F,IAG5C4F,EAnEO,KAqETA,EAAU,KACf1B,EAAa0B,IA8HL7J,KAAK,OACL8E,SAAU2E,MAGd,kBAACxH,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGf,UAAU,cACnC,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUE,QAASgI,GAAgBK,SAAUrB,GAAgB,0BAAMpH,UAAU,yBAA7F,cAA+I,IAC/I,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUE,QAzCd,WAClBmG,EVzLK,CACL5H,KAHiB,UU4LjBwI,EAAqB,aACrBF,EAAWF,GACXe,GAAiB,MAqCsC,0BAAM9H,UAAU,mBAAjE,aAIAwH,GAAaA,EAAUvD,OAAS,EAChC,kBAACxC,EAAA,EAAD,CAAKzB,UAAU,QACb,kBAACY,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GACtB,kBAACtB,EAAD,CAAWE,MAAO+H,EAAW9H,SA9GjB,WACtB,IAAM8I,GAAchB,EACpBG,GAAc,MACdF,GAAae,GACb,IAAIC,EAAkBC,MAAMC,KAAKrB,GAC3BkB,EACJC,EAAgBG,MAAK,SAAChE,EAAGiE,GACvB,IAAMC,EAAIlE,EAAEzD,MAAM4H,cACZC,EAAIH,EAAE1H,MAAM4H,cAClB,OAAID,EAAIE,GAAa,EACjBF,EAAIE,EAAY,EACb,KAITP,EAAgBG,MAAK,SAAChE,EAAGiE,GACvB,IAAMC,EAAIlE,EAAEzD,MAAM4H,cACZC,EAAIH,EAAE1H,MAAM4H,cAClB,OAAID,EAAIE,EAAY,EAChBF,EAAIE,GAAa,EACd,KAGXpB,GAAiBa,OAyFT,kBAAC/H,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GACtB,kBAACV,EAAD,CAAYV,MAAOiI,GAAYhI,SAxFlB,WACvB,IAAM8I,GAAcd,GACpBD,GAAa,MACbE,GAAca,GACd,IAAIC,EAAkBC,MAAMC,KAAKrB,GAC3BkB,EACJC,EAAgBG,MAAK,SAAChE,EAAGiE,GACvB,IAAMC,EAAIG,WAA4B,QAAjBrE,EAAEvD,WAAuB,EAAIuD,EAAEvD,YAC9C2H,EAAIC,WAA4B,QAAjBJ,EAAExH,WAAuB,EAAIwH,EAAExH,YACpD,OAAIyH,EAAIE,GAAa,EACjBF,EAAIE,EAAY,EACb,KAITP,EAAgBG,MAAK,SAAChE,EAAGiE,GACvB,IAAMC,EAAIG,WAA4B,QAAjBrE,EAAEvD,WAAuB,EAAIuD,EAAEvD,YAC9C2H,EAAIC,WAA4B,QAAjBJ,EAAExH,WAAuB,EAAIwH,EAAExH,YACpD,OAAIyH,EAAIE,EAAY,EAChBF,EAAIE,GAAa,EACd,KAGXpB,GAAiBa,QAoET,KAGN,kBAAClH,EAAA,EAAD,KACE,kBAACb,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAEnBiG,GAAWQ,EAAUvD,QAAU,EAE/B,uBAAGjE,UAAW,QAAUkH,GACrBF,GAGDM,EACA,kBAAC,EAAD,MAEA,oCACE,uBAAGtH,UAAU,cAAa,4CAAkBwH,EAAUvD,OAA5B,iBAC1B,kBAACzC,EAAD,CAAM9C,KAAM8I,EAAW7G,eAzNhB,SAACjC,GACtB,IAAM0K,EAAe,CACnBvK,OAAQ,CACNwK,cAAc,eACT3K,KAIT6H,EAAS9H,EAAO2K,IAChB/C,EAAQN,KAAK,mB,sBClBXuD,EAA0B,SAACC,GAC/B,OAAQA,GACN,IAAK,QACH,MAAO,UAET,IAAK,WACH,MAAO,wBACT,IAAK,UACH,MAAO,gBACT,IAAK,QACH,MAAO,eACT,IAAK,WACH,MAAO,UACT,IAAK,SACH,MAAO,WACT,IAAK,SACH,MAAO,SACT,IAAK,OACH,MAAO,SACT,IAAK,WACH,MAAO,YACT,IAAK,UACH,MAAO,UACT,IAAK,SACH,MAAO,aACT,IAAK,YACH,MAAO,YACT,IAAK,aACH,MAAO,eACT,IAAK,YACH,MAAO,6BACT,IAAK,MACH,MAAO,MACT,IAAK,YACH,MAAO,aACT,IAAK,aACH,MAAO,iBACT,IAAK,UACH,MAAO,UACT,IAAK,eACH,MAAO,0BACT,QACE,OAAOA,IAmBE,SAASC,EAAY9J,GAClC,IAAM2G,EAAUC,cACVC,EAAWC,cACX6C,EAAgB3C,aAAY,SAAA1H,GAAK,OAAIA,EAAMH,OAAOwK,iBAExDI,qBAAU,WACHJ,GAAehD,EAAQN,KAAK,OAChC,CAACsD,EAAehD,IAYnB,OAAKgD,EAKD,kBAAC/I,EAAD,KACE,kBAACmB,EAAA,EAAD,KACE,kBAACb,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIf,UAAU,8EACrC,kBAACC,EAAA,EAAD,CAAQC,QAAQ,QAAQE,QAlBX,WAMrBmG,EAAS9H,EALY,CACnBI,OAAQ,CACNwK,cAAe,SAInBhD,EAAQN,KAAK,OAW4C,0BAAM/F,UAAU,uBAAjE,WACA,wBAAIA,UAAU,mBAAd,wBAIJ,6BACA,kBAACyB,EAAA,EAAD,KAI6B,QAAzB4H,EAAcnI,OACZ,kBAACN,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GACtB,kBAAC2I,EAAA,EAAD,CAAOzI,IAAKoI,EAAcnI,OAAQyI,WAAS,EAACC,OAAK,KAEjD,KAEN,kBAAChJ,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,IAEtB,wBAAIf,UAAU,kBAAkBqJ,EAAchI,OAC9C,uBAAGrB,UAAU,wBAAb,QAA0CqJ,EAAcQ,MACxD,uBAAG7J,UAAU,wBAAb,SA5HW,SAACrB,GACtB,OAAQA,EAAKsK,eACX,IAAK,QACH,MAAO,QAET,IAAK,SACH,MAAO,WAET,IAAK,UACH,MAAO,cAET,QACE,MAAO,eAgH0Ca,CAAeT,EAAcU,QAG1E,kBAACnJ,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAGjBsI,EACA,oCACE,kBAACW,EAAA,EAAD,CAAOC,YAAU,GACf,+BAvED,SAACC,GACpB,IAAIC,EAAe,GACnB,IAAK,IAAItE,KAAKqE,EACF,YAANrE,GAAyB,UAANA,GAAuB,SAANA,GAAsB,SAANA,GAAsB,WAANA,GAAwB,WAANA,GAAwB,aAANA,GAC1GsE,EAAapE,KAAK,CAChBL,GAAIG,EACJuE,MAAOd,EAAwBzD,GAC/BlG,MAAOuK,EAAWrE,KAKxB,OAAOsE,EA4DgBE,CAAahB,GAAe3H,KAAI,SAAAC,GAC/B,OACE,wBAAIxC,IAAKwC,EAAK+D,IACZ,wBAAInD,MAAM,OAAOZ,EAAKyI,OACtB,4BAEGzI,EAAKhC,MACO,eAAZgC,EAAK+D,GAAsB,MAAQ,aAShD,QArDT,K,kCC3GI,WACX,IAAM4E,EAAQC,YAAY/K,EAAagL,YAAgBC,MAEvD,MAAO,CAAEH,QAAOI,UADEC,YAAaL,ICQNM,GAArBN,G,EAAAA,MAAOI,G,EAAAA,UAEA,SAASG,KACtB,OACE,kBAAC,IAAD,CAAeP,MAAOA,IACpB,kBAAC,IAAD,CAAaQ,QAAS,KAAMJ,UAAWA,IACrC,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,KAChB,kBAAC5E,EAAD,OAEF,kBAAC,IAAD,CAAO2E,OAAK,EAACC,KAAK,YAChB,kBAACxB,EAAD,WCfMyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAACV,GAAD,MACAW,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzG,MAAK,SAAA0G,GACJA,EAAaC,gBAEdzG,OAAM,SAAAhC,GACL0I,QAAQ1I,MAAMA,EAAM2D,a,mBEzI5BgF,EAAOC,QAAU,IAA0B,4C","file":"static/js/main.03bf79df.chunk.js","sourcesContent":["export const CLEAR = 'CLEAR';\r\nexport const clear = () => {\r\n  return {\r\n    type: CLEAR,\r\n  };\r\n}\r\nexport const UPDATE = 'UPDATE';\r\nexport const update = (data) => {\r\n  return {\r\n    type: UPDATE,\r\n    data: data\r\n  };\r\n}\r\n","//Import action types\r\nimport * as Actions from '../actions/movies';\r\n\r\nconst initialState = {\r\n    movies: {\r\n        list: []\r\n    },\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case Actions.UPDATE:\r\n            return {\r\n                ...state,\r\n                movies: {\r\n                    ...state.movies,\r\n                    ...action.data.movies\r\n                },\r\n            };\r\n\r\n\r\n        case Actions.CLEAR:\r\n            return {\r\n                ...initialState\r\n            };\r\n\r\n\r\n\r\n\r\n        default:\r\n            return {\r\n                ...state,\r\n            };\r\n    }\r\n}\r\n\r\nexport default reducer;","import { persistReducer } from 'redux-persist';\r\nimport storage from 'localforage';\r\nimport moviesReducer from './reducers/movies';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage: storage,\r\n};\r\nconst appReducer = persistReducer(persistConfig, moviesReducer);\r\n\r\nexport default function rootReducer(state,action){\r\n    return appReducer(state,action);\r\n}","import React from 'react';\r\nimport {\r\n    Button,\r\n\r\n} from 'react-bootstrap';\r\n\r\nexport default function AlphaSort(props) {\r\n\r\n    const value = props.value;\r\n    const setValue = props.setValue;\r\n    const colorClass = value === null ? \"outline-dark\" : \"outline-info\";\r\n    const iconClass = !!value ? \"mdi mdi-sort-alphabetical-ascending\" : value === false ? \"mdi mdi-sort-alphabetical-descending\" : \"mdi mdi-sort-alphabetical-ascending\";\r\n    const title = !!value ? \"Ordenado alfabeticamente de maneira crescente\" : value === false ? \"Ordenado alfabeticamente de maneira decrescente\" : \"Não ordenado alfabeticamente\";\r\n    const onClick = () => {\r\n        if(!!setValue) setValue();\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"mb-2\">\r\n            <Button variant={colorClass} block onClick={onClick} title={title}>\r\n                <span className={iconClass}></span> {title}\r\n            </Button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {\r\n    Button,\r\n\r\n} from 'react-bootstrap';\r\n\r\nexport default function RatingSort(props) {\r\n\r\n    const value = props.value;\r\n    const setValue = props.setValue;\r\n    const colorClass = value === null ? \"outline-dark\" : \"outline-info\";\r\n    const iconClass = !!value ? \"mdi mdi-sort-ascending\" : value === false ? \"mdi mdi-sort-descending\" : \"mdi mdi-sort-ascending\";\r\n    const title = !!value ? \"Ordenado por nota média de maneira crescente\" : value === false ? \"Ordenado por nota média de maneira decrescente\" : \"Não ordenado por nota média\";\r\n    const onClick = () => {\r\n        if(!!setValue) setValue();\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"mb-2\">\r\n            <Button variant={colorClass} block onClick={onClick} title={title}>\r\n                <span className={iconClass}></span> {title}\r\n            </Button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\n\r\n\r\nexport default function Layout(props) {\r\n    return (\r\n        <div className=\"w-100 h-100\" >\r\n            <div className=\"container py-3\">\r\n                <Card>\r\n                    <Card.Body>\r\n                        {props.children}\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {\r\n    Card,\r\n    Image,\r\n    Row,\r\n    Col\r\n} from 'react-bootstrap';\r\nimport BgPlaceholder from '../../assets/img/bg-placeholder.jpg';\r\n\r\n\r\nconst ListItem = (props) => {\r\n    const data = props.data;\r\n    const onCheckDetails = props.onCheckDetails;\r\n    const onClick = () => {\r\n        if (!!onCheckDetails) onCheckDetails(data);\r\n    }\r\n    return (\r\n        <Col sm={12} md={4} lg={3} className=\"p-2\">\r\n            <Card className=\"clickable\" onClick={onClick}>\r\n                <Card.Img variant=\"top\" src={data.Poster !== 'N/A' ? data.Poster : BgPlaceholder} className=\"dti-poster\" />\r\n                <Card.Body className=\"p-2\">\r\n                    <div className=\"dti-poster-card-body d-flex flex-column flex-wrap justify-content-start align-items-start\">\r\n                        <Card.Subtitle className=\"p-0 m-0\">\r\n                            {data.Title}\r\n                        </Card.Subtitle>\r\n                        <Card.Text className=\"p-0 pt-1 m-0 d-flex w-100 flex-row align-items-center\">\r\n                            <span className=\"mdi mdi-star text-warning\"></span>\r\n                            <span className=\"text-muted\">{data.imdbRating === \"N/A\" ? \"0\" : data.imdbRating}/10</span>\r\n                        </Card.Text>\r\n                    </div>\r\n                </Card.Body>\r\n            </Card>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default function List(props) {\r\n    const data = !!props.data ? props.data : [];\r\n    const onCheckDetails = !!props.onCheckDetails ? props.onCheckDetails : null;\r\n    return (\r\n        <>\r\n            <Row>\r\n                {data.map(item => {\r\n                    return (\r\n                        <ListItem key={item.imdbID} data={item} onCheckDetails={onCheckDetails} />\r\n                    );\r\n                })}\r\n            </Row>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport Lottie from 'react-lottie';\r\nimport searchingAnimation from '../../assets/animations/searching.json';\r\n\r\n\r\nexport default function LoadingScreen(props) {\r\n\r\n    const defaultAnimationOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: searchingAnimation,\r\n        rendererSettings: {\r\n            preserveAspectRatio: \"xMidYMid slice\"\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <div className=\"w-100 d-flex flex-column flex-wrap justify-content-center align-items-center\">\r\n                <Lottie\r\n                    options={defaultAnimationOptions}\r\n                    height={200}\r\n                    width={200}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n\r\n\r\n}\r\n","import React, { useState } from 'react';\r\nimport {\r\n    Form\r\n} from 'react-bootstrap';\r\n\r\nexport default function SearchInput(props) {\r\n\r\n    const controlId = !!props.controlId ? props.controlId : \"form_\";\r\n    const required = !!props.required ? props.required : false;\r\n    const type = !!props.type ? props.type : \"text\";\r\n    const placeholder = !!props.placeholder ? !!required ? props.placeholder + \" (obrigatório)\" : props.placeholder : \"\";\r\n    const maxYear = type === \"year\" ? new Date().getFullYear() : null;\r\n    const minYear = type === \"year\" ? 1895 : null;\r\n    const minChar = !!props.minChar ? props.minChar : null;\r\n    const inputProps = type === \"year\" ? { min: minYear, max: maxYear } : null;\r\n    const [error, setError] = useState(null);\r\n    const [value, setValue] = useState(\"\");\r\n\r\n    const onBeforeChange = !!props.onBeforeChange ? props.onBeforeChange : null;\r\n    const onAfterChange = !!props.onAfterChange ? props.onAfterChange : null;\r\n\r\n    const onChange = (e) => {\r\n        let newVal = e.target.value;\r\n        if (!!onBeforeChange) onBeforeChange(newVal);\r\n        if (!!required) {\r\n            if (!newVal) setError(\"Este campo é obrigatório!\");\r\n            else setError(null);\r\n            if(!!minChar){\r\n                if(newVal.length < minChar) setError(\"Você precisa preencher pelo menos \"+ minChar + \" caracteres.\");\r\n                else setError(null);\r\n            }\r\n        }\r\n        if (type === \"year\") {\r\n            if (!!newVal && newVal.length >= 4 && !(parseInt(newVal) >= minYear && parseInt(newVal) <= maxYear)) {\r\n                if (parseInt(newVal) < minYear) newVal = minYear;\r\n                else if (parseInt(newVal) > maxYear) newVal = maxYear;\r\n            }\r\n        }\r\n        if (!!onAfterChange) onAfterChange(newVal);\r\n        setValue(newVal);\r\n    }\r\n\r\n    const onBlur = () => {\r\n        let newVal = value;\r\n        if (!!required) {\r\n            if (!newVal) setError(\"Este campo é obrigatório!\");\r\n            else setError(null);\r\n            if(!!minChar){\r\n                if(newVal.length < minChar) setError(\"Você precisa preencher pelo menos \"+ minChar + \" caracteres.\");\r\n                else setError(null);\r\n            }\r\n            \r\n        }\r\n        if (type === \"year\") {\r\n            if (!!newVal ) {\r\n                if(newVal.length >= 4){\r\n                    if (!(parseInt(newVal) >= minYear && parseInt(newVal) <= maxYear)) {\r\n                        if (parseInt(newVal) < minYear) newVal = minYear;\r\n                        else if (parseInt(newVal) > maxYear) newVal = maxYear;\r\n                    }\r\n                }\r\n                else newVal = minYear;\r\n            }\r\n        }\r\n        setValue(newVal);\r\n    }\r\n\r\n    const onSubmit = !!props.onSubmit ? props.onSubmit : null;\r\n\r\n    const onKeyPress = (e) => {\r\n        if(e.charCode === 13 && !!onSubmit) onSubmit();\r\n    }\r\n    return (\r\n        <Form.Group controlId={controlId} >\r\n            <Form.Control {...inputProps} type={type === \"year\" ? \"number\" : type} placeholder={placeholder} value={value} onChange={onChange} onBlur={onBlur} onKeyPress={onKeyPress} />\r\n            {\r\n                !error ? null :\r\n                    <Form.Text className=\"text-danger px-1\">\r\n                        {error}\r\n                    </Form.Text>\r\n            }\r\n        </Form.Group>\r\n    );\r\n}","import axios from 'axios';\r\n\r\nconst APIkey = '4592c110';\r\n\r\nconst omdbAPIServiceBase = axios.create({\r\n    baseURL: \"http://www.omdbapi.com\",\r\n});\r\n\r\nconst omdbAPIService = {\r\n    search: {\r\n        byTitle: async (title, onSuccess = null, onError = null) => {\r\n            const url = \"?apikey=\" + APIkey + \"&s=\" + title + \"&r=JSON\";\r\n\r\n            await omdbAPIServiceBase({\r\n                method: 'get',\r\n                url: url,\r\n            })\r\n                .then((res) => {\r\n                    if (!!onSuccess) onSuccess(res.data);\r\n                })\r\n                .catch((err) => {\r\n                    if (!!onError) onError(err);\r\n                });\r\n        },\r\n        byTitleAndYear: async (title, year, onSuccess = null, onError = null) => {\r\n            const url = \"?apikey=\" + APIkey + \"&s=\" + title + \"&y=\" + year + \"&r=JSON\";\r\n            await omdbAPIServiceBase({\r\n                method: 'get',\r\n                url: url,\r\n            })\r\n                .then((res) => {\r\n                    if (!!onSuccess) onSuccess(res.data);\r\n                })\r\n                .catch((err) => {\r\n                    if (!!onError) onError(err);\r\n                });\r\n        },\r\n        byId: async (id, onSuccess = null, onError = null) => {\r\n            const url = \"?apikey=\" + APIkey + \"&i=\" + id + \"&r=JSON\";\r\n            await omdbAPIServiceBase({\r\n                method: 'get',\r\n                url: url,\r\n            })\r\n                .then((res) => {\r\n                    if (!!onSuccess) onSuccess(res.data);\r\n                })\r\n                .catch((err) => {\r\n                    if (!!onError) onError(err);\r\n                });\r\n        },\r\n        batch: async (arr, onSuccess = null, onError = null) => {\r\n            let promisesArr = [];\r\n            for (let i in arr) {\r\n                promisesArr.push(\r\n                    omdbAPIServiceBase({\r\n                        method: 'get',\r\n                        url: \"?apikey=\" + APIkey + \"&i=\" + arr[i].imdbID + \"&r=JSON\",\r\n                    })\r\n                );\r\n            }\r\n            let dataFetchedArr = [];\r\n            await Promise.all(promisesArr).then((values) => {\r\n                for (let i in values) {\r\n                    dataFetchedArr.push(\r\n                        {\r\n                            ...values[i].data\r\n                        }\r\n                    );\r\n                }\r\n            }).catch(err => {\r\n                if (!!onError) onError(err);\r\n            });\r\n            if (!!onSuccess) onSuccess(dataFetchedArr);\r\n        },\r\n    }\r\n};\r\n\r\nexport default omdbAPIService;","import React, { useState } from 'react';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button\r\n} from 'react-bootstrap';\r\nimport {\r\n  Layout,\r\n  SearchInput,\r\n  Loading,\r\n  List,\r\n  AlphaSort,\r\n  RatingSort\r\n} from '../components';\r\nimport omdbAPI from '../services/omdb-api';\r\nimport { useHistory } from 'react-router';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { update, clear } from '../redux/actions/movies';\r\n\r\nexport default function MoviesList(props) {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const storedList = useSelector(state => state.movies.list);\r\n\r\n  const maxYear = new Date().getFullYear();\r\n  const minYear = 1895;\r\n\r\n  const [movieName, setMovieName] = useState(\"\");\r\n  const [movieYear, setMovieYear] = useState(\"\");\r\n  const initialMessage = \"Os resultados da sua pesquisa aparecerão aqui\";\r\n  const [message, setMessage] = useState(initialMessage);\r\n  const [messageColorClass, setMessageColorClass] = useState(\"text-info\");\r\n  const [buttonDisabled, setButtonDisabled] = useState(true);\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const [movieList, setMovieList] = useState(storedList);\r\n\r\n  const [alphaSort, setAlphaSort] = useState(null);\r\n  const [ratingSort, setRatingSort] = useState(null);\r\n\r\n\r\n  const onCheckDetails = (data) => {\r\n    const dispatchData = {\r\n      movies: {\r\n        selectedMovie: {\r\n          ...data\r\n        }\r\n      }\r\n    }\r\n    dispatch(update(dispatchData));\r\n    history.push(\"/details\");\r\n  }\r\n\r\n  const updateMoviesList = (data) => {\r\n    const dispatchData = {\r\n      movies: {\r\n        list: data\r\n      }\r\n    }\r\n    dispatch(update(dispatchData));\r\n    setMovieList(data);\r\n  }\r\n\r\n  const onUpdateName = (name) => {\r\n    if (!name) {\r\n      setButtonDisabled(true);\r\n      setMessageColorClass(\"text-danger\");\r\n      setMessage(\"Você deve informar um nome pra poder pesquisar\");\r\n    }\r\n    else {\r\n      if (name.length < 3) {\r\n        setButtonDisabled(true);\r\n        setMessageColorClass(\"text-danger\");\r\n        setMessage(\"O nome deve ter ao menos 3 caracteres.\");\r\n      }\r\n      else {\r\n        setButtonDisabled(false);\r\n        setMessageColorClass(\"text-success\");\r\n        setMessage(\"Clique em pesquisar para efetuar sua pesquisa.\")\r\n      }\r\n    }\r\n    setMovieName(name);\r\n\r\n  }\r\n  const onUpdateYear = (year) => {\r\n    let yearVal = year;\r\n    if (!!year) {\r\n      if (year.length >= 4) {\r\n        if (!(parseInt(year) >= minYear && parseInt(year) <= maxYear)) {\r\n          if (parseInt(year) < minYear) yearVal = minYear;\r\n          else if (parseInt(year) > maxYear) yearVal = maxYear;\r\n        }\r\n      }\r\n      else yearVal = minYear;\r\n    }\r\n    else yearVal = null;\r\n    setMovieYear(yearVal);\r\n  }\r\n\r\n\r\n  const onSearchSuccess = (result) => {\r\n    setAlphaSort(null);\r\n    setRatingSort(null);\r\n    if (!result.Search) {\r\n      setIsSearching(false);\r\n\r\n      setMessageColorClass(\"text-info\");\r\n      setMessage(\"Nenhum item encontrado.\")\r\n      updateMoviesList([]);\r\n    }\r\n    else {\r\n      omdbAPI.search.batch(result.Search, (res) => {\r\n        setIsSearching(false);\r\n        updateMoviesList(res);\r\n      }, onSearchError);\r\n\r\n    }\r\n  }\r\n\r\n  const onSearchError = (error) => {\r\n    setIsSearching(false);\r\n    setMessageColorClass(\"text-danger\");\r\n    setMessage(\"Erro ao buscar informações na API.\");\r\n  }\r\n\r\n  const updateAlphaSort = () => {\r\n    const newValue = !!!alphaSort;\r\n    setRatingSort(null);\r\n    setAlphaSort(newValue);\r\n    let sortedMovieList = Array.from(movieList);\r\n    if (!!newValue) {\r\n      sortedMovieList.sort((a, b) => {\r\n        const x = a.Title.toLowerCase();\r\n        const y = b.Title.toLowerCase();\r\n        if (x < y) { return -1; }\r\n        if (x > y) { return 1; }\r\n        return 0;\r\n      });\r\n    }\r\n    else {\r\n      sortedMovieList.sort((a, b) => {\r\n        const x = a.Title.toLowerCase();\r\n        const y = b.Title.toLowerCase();\r\n        if (x < y) { return 1; }\r\n        if (x > y) { return -1; }\r\n        return 0;\r\n      });\r\n    }\r\n    updateMoviesList(sortedMovieList);\r\n  }\r\n  const updateRatingSort = () => {\r\n    const newValue = !!!ratingSort;\r\n    setAlphaSort(null);\r\n    setRatingSort(newValue);\r\n    let sortedMovieList = Array.from(movieList);\r\n    if (!!newValue) {\r\n      sortedMovieList.sort((a, b) => {\r\n        const x = parseFloat(a.imdbRating === \"N/A\" ? 0 : a.imdbRating);\r\n        const y = parseFloat(b.imdbRating === \"N/A\" ? 0 : b.imdbRating);\r\n        if (x < y) { return -1; }\r\n        if (x > y) { return 1; }\r\n        return 0;\r\n      });\r\n    }\r\n    else {\r\n      sortedMovieList.sort((a, b) => {\r\n        const x = parseFloat(a.imdbRating === \"N/A\" ? 0 : a.imdbRating);\r\n        const y = parseFloat(b.imdbRating === \"N/A\" ? 0 : b.imdbRating);\r\n        if (x < y) { return 1; }\r\n        if (x > y) { return -1; }\r\n        return 0;\r\n      });\r\n    }\r\n    updateMoviesList(sortedMovieList);\r\n  }\r\n\r\n  const onSubmitSearch = () => {\r\n    setMessage(null);\r\n    setIsSearching(true);\r\n    if (!!movieName && !!movieYear) {\r\n      omdbAPI.search.byTitleAndYear(movieName, movieYear, onSearchSuccess, onSearchError);\r\n    }\r\n    else {\r\n      omdbAPI.search.byTitle(movieName, onSearchSuccess, onSearchError);\r\n    }\r\n  }\r\n\r\n  const onClearData = () => {\r\n    dispatch(clear());\r\n    setMessageColorClass(\"text-info\");\r\n    setMessage(initialMessage);\r\n    updateMoviesList([]);\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Row>\r\n        <Col sm={12} md={12} lg={12}>\r\n\r\n          <h1 className=\"w-100 m-0 pb-3\">Olá visitante!</h1>\r\n          <p>\r\n            Seja bem vindo a pesquisa gratuita de filmes utilizando a <a href=\"http://www.omdbapi.com/\" target=\"_blank\" rel=\"noopener noreferrer\">OMDb API</a>.\r\n          </p>\r\n          <p>Utilize o formulário abaixo para realizar sua pesquisa.</p>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col sm={12} md={6} lg={6}>\r\n          <SearchInput\r\n            placeholder=\"Nome do filme\"\r\n            controlId=\"formSearch_Name\"\r\n            onAfterChange={onUpdateName}\r\n            required\r\n            onSubmit={onSubmitSearch}\r\n            minChar={3}\r\n          />\r\n        </Col>\r\n        <Col sm={12} md={3} lg={3}>\r\n          <SearchInput\r\n            placeholder=\"Ano do filme\"\r\n            controlId=\"formSearch_Year\"\r\n            onAfterChange={onUpdateYear}\r\n            type=\"year\"\r\n            onSubmit={onSubmitSearch}\r\n          />\r\n        </Col>\r\n        <Col sm={12} md={3} lg={3} className=\"text-right\">\r\n          <Button variant=\"primary\" onClick={onSubmitSearch} disabled={buttonDisabled}><span className=\"mdi mdi-cloud-search\"></span> Pesquisar</Button>{\" \"}\r\n          <Button variant=\"warning\" onClick={onClearData} ><span className=\"mdi mdi-eraser\"></span> Limpar</Button>\r\n        </Col>\r\n      </Row>\r\n      {\r\n        !!movieList && movieList.length > 0 ?\r\n          <Row className=\"pt-2\">\r\n            <Col sm={12} md={6} lg={6}>\r\n              <AlphaSort value={alphaSort} setValue={updateAlphaSort} />\r\n            </Col>\r\n            <Col sm={12} md={6} lg={6}>\r\n              <RatingSort value={ratingSort} setValue={updateRatingSort} />\r\n            </Col>\r\n          </Row>\r\n          : null\r\n      }\r\n\r\n      <Row>\r\n        <Col sm={12} md={12} lg={12}>\r\n          {\r\n            !!message && movieList.length <= 0 ?\r\n\r\n              <p className={\"pt-3 \" + messageColorClass}>\r\n                {message}\r\n              </p>\r\n              :\r\n              !!isSearching ?\r\n                <Loading />\r\n                :\r\n                <>\r\n                  <p className=\"text-muted\"><small>Mostrando {movieList.length} resultados.</small></p>\r\n                  <List data={movieList} onCheckDetails={onCheckDetails} />\r\n                </>\r\n          }\r\n        </Col>\r\n      </Row>\r\n\r\n    </Layout>\r\n  );\r\n}","import React, {  useEffect } from 'react';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Image,\r\n  Table\r\n} from 'react-bootstrap';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Layout,\r\n} from '../components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { update } from '../redux/actions/movies';\r\n\r\nconst parseMovieType = (type) => {\r\n  switch (type.toLowerCase()) {\r\n    case \"movie\":\r\n      return \"Filme\";\r\n\r\n    case \"series\":\r\n      return \"Série\";\r\n\r\n    case \"episode\":\r\n      return \"Episódio\";\r\n\r\n    default:\r\n      return \"Inválido\";\r\n  }\r\n}\r\n\r\nconst translateMovieAttribute = (attr) => {\r\n  switch (attr) {\r\n    case \"Rated\":\r\n      return \"Censura\";\r\n\r\n    case \"Released\":\r\n      return \"Data de Lançamento\";\r\n    case \"Runtime\":\r\n      return \"Duração\";\r\n    case \"Genre\":\r\n      return \"Gênero(s)\";\r\n    case \"Director\":\r\n      return \"Diretor\";\r\n    case \"Writer\":\r\n      return \"Escritor\";\r\n    case \"Actors\":\r\n      return \"Atores\";\r\n    case \"Plot\":\r\n      return \"Enredo\";\r\n    case \"Language\":\r\n      return \"Linguagem\";\r\n    case \"Country\":\r\n      return \"País\";\r\n    case \"Awards\":\r\n      return \"Prêmios\";\r\n    case \"Metascore\":\r\n      return \"Metascore\";\r\n    case \"imdbRating\":\r\n      return \"Nota no imdb\";\r\n    case \"imdbVotes\":\r\n      return \"Número de Votos no imdb\";\r\n    case \"DVD\":\r\n      return \"DVD\";\r\n    case \"BoxOffice\":\r\n      return \"Bilheteria\";\r\n    case \"Production\":\r\n      return \"Produção\";\r\n    case \"Website\":\r\n      return \"Website\";\r\n    case \"totalSeasons\":\r\n      return \"Número de temporadas\";\r\n    default:\r\n      return attr;\r\n  }\r\n}\r\n\r\nconst parseDetails = (detailsObj) => {\r\n  let detailsArray = [];\r\n  for (let i in detailsObj) {\r\n    if (i !== \"Ratings\" && i !== \"Title\" && i !== \"Year\" && i !== \"Type\" && i !== \"Poster\" && i !== \"imdbID\" && i !== \"Response\") {\r\n      detailsArray.push({\r\n        id: i,\r\n        label: translateMovieAttribute(i),\r\n        value: detailsObj[i]\r\n      });\r\n    }\r\n\r\n  }\r\n  return detailsArray;\r\n}\r\n\r\nexport default function MovieDetail(props) {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const selectedMovie = useSelector(state => state.movies.selectedMovie);\r\n\r\n  useEffect(() => {\r\n    if (!selectedMovie) history.push(\"/\");\r\n  }, [selectedMovie, history]);\r\n\r\n  const onNavigateBack = () => {\r\n    const dispatchData = {\r\n      movies: {\r\n        selectedMovie: null\r\n      }\r\n    }\r\n    dispatch(update(dispatchData));\r\n    history.push(\"/\");\r\n  }\r\n\r\n  if (!selectedMovie) {\r\n    return null;\r\n  }\r\n  else {\r\n    return (\r\n      <Layout>\r\n        <Row>\r\n          <Col sm={12} md={12} lg={12} className=\"w-100 d-flex flex-row flex-wrap justify-content-between align-items-center\">\r\n            <Button variant=\"light\" onClick={onNavigateBack}><span className=\"mdi mdi-arrow-left\"></span> Voltar</Button>\r\n            <h5 className=\" m-0 text-muted\">Detalhes do Titulo</h5>\r\n\r\n          </Col>\r\n        </Row>\r\n        <hr />\r\n        <Row>\r\n\r\n\r\n          {\r\n            selectedMovie.Poster !== 'N/A' ?\r\n              <Col sm={12} md={3} lg={2}>\r\n                <Image src={selectedMovie.Poster} thumbnail fluid />\r\n              </Col>\r\n              : null\r\n          }\r\n          <Col sm={12} md={9} lg={10}>\r\n\r\n            <h4 className=\"w-100 m-0 pb-2\">{selectedMovie.Title}</h4>\r\n            <p className=\"w-100 m-0 text-muted\">Ano: {selectedMovie.Year}</p>\r\n            <p className=\"w-100 m-0 text-muted\">Tipo: {parseMovieType(selectedMovie.Type)}</p>\r\n          </Col>\r\n\r\n          <Col sm={12} md={12} lg={12}>\r\n\r\n            {\r\n                !!selectedMovie ?\r\n                  <>\r\n                    <Table responsive>\r\n                      <tbody>\r\n                        {parseDetails(selectedMovie).map(item => {\r\n                          return (\r\n                            <tr key={item.id}>\r\n                              <th width=\"30%\">{item.label}</th>\r\n                              <td>\r\n\r\n                                {item.value}\r\n                                {item.id === \"imdbRating\" ? \"/10\" : null}\r\n                              </td>\r\n                            </tr>\r\n                          );\r\n                        })}\r\n                      </tbody>\r\n                    </Table>\r\n\r\n                  </>\r\n                  : null\r\n            }\r\n          </Col>\r\n        </Row>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\n}","import { createStore, applyMiddleware  } from 'redux';\r\nimport rootReducer from './combineReducers';\r\nimport thunk from 'redux-thunk';\r\nimport { persistStore } from 'redux-persist';\r\n\r\nexport default () => {\r\n    const store = createStore(rootReducer, applyMiddleware(thunk));\r\n    const persistor = persistStore(store);\r\n    return { store, persistor };\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { Provider as StoreProvider } from 'react-redux';\r\nimport { default as reduxStore } from './redux/store';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport {\r\n  MoviesList,\r\n  MovieDetails\r\n} from './views';\r\n\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport \"@mdi/font/css/materialdesignicons.css\";\r\nimport './assets/css/general.css';\r\n\r\nconst { store, persistor } = reduxStore();\r\n\r\nexport default function App() {\r\n  return (\r\n    <StoreProvider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <Router >\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <MoviesList />\r\n            </Route>\r\n            <Route exact path=\"/details\" >\r\n              <MovieDetails />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </PersistGate>\r\n    </StoreProvider>\r\n  );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/bg-placeholder.0a5b8f21.jpg\";"],"sourceRoot":""}